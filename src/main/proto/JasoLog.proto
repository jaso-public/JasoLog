
syntax = "proto3";

option java_multiple_files = true;
option java_package = "jaso.log.protocol";
option java_outer_classname = "JasoLogProto";
option objc_class_prefix = "JL";

package JasoLog;





/**************************** Key/Value store interface ****************************/

message DB_attribute {
	string key = 1;
	string value = 2;
}

message DB_item {
    repeated DB_attribute attributes = 12;
}

enum Action {
	WRITE = 0;
	DELETE = 1;
}

message DB_row {
	int64 lsn = 1;
	Action action = 2;
	DB_item item = 3;
}
     
message DB_delete {
	string partition_id = 10;
	string request_id = 11;
	string table = 1;
	string key = 2;
}

message DB_insert {
	string partition_id = 10;
	string request_id = 11;
	string table = 1;
	string key = 2;
	DB_item value = 3;
}

message DB_read {
	string partition_id = 10;
	string request_id = 11;
	string table = 1;
	string key = 2;
	repeated string fields = 3;
}

message DB_scan {
	string partition_id = 10;
	string request_id = 11;
	string table = 1;
	string start_key = 2;
	int32 record_count = 3;
	repeated string fields = 4;
}
	
message DB_update {
	string partition_id = 10;
	string request_id = 11;
	string table = 1;
	string key = 2;
	DB_item value = 3;
}

message DB_status {
	string request_id = 11;
	string status = 1;
}

message DB_result {
	string request_id = 11;
	string status = 1;
	repeated DB_item value = 2;
}


service DatabaseService {
    rpc delete (DB_delete) returns (DB_status);
    rpc insert (DB_insert) returns (DB_status);
    rpc update (DB_update) returns (DB_status);

    rpc read (DB_read) returns (DB_result);
    rpc scan (DB_scan) returns (DB_result);
}




message LogData {
    string key = 1;
    Action action = 2;
    DB_item item = 3;
    string request_id = 4;
}


/* just a place holder for other log entries */
message SystemEntry {
	int32 entry_checksum = 6;
}


/* these are the things that are actually written to the log */
message LogEntry {
    oneof entry_type {
    	LogData log_data = 1;
    	SystemEntry system_entry = 2;
    }
    
    int64 lsn = 11;
    int64 time = 12;
}



	



/*********************** Server Message Stuff ***********************/


/* stuff for a raft prototype only */

message LastVoteInfo {
    int64 term = 1;
    string voted_for = 2;
}


/* used to serialize server lists in messages and on disk */
message ServerList {
	repeated string server_ids = 1;
}


message HelloRequest {
	string serverId = 1;
}

message HelloResult {
	string serverId = 1;
}

message ExtendRequest {
    string partition_id = 1;
	string leaderId = 2;
}
	

message AppendRequest {
    string partition_id = 1;
    string leader_id = 2;
    int64 current_term = 3;
    int64 previous_term = 4;
    int64 previous_log_index = 5;
    int64 commit_index = 6;    
    int64 lsn = 11;
    
    string request_id = 13;
 
    bytes bytes_to_log = 12;
}	

message AppendResult {
    string partition_id = 10;
    int64 term = 1;
    bool success = 2;
    string request_id = 11;
}

message VoteRequest {
    string partition_id = 1;
    int64 term = 2;
    string candidate_id = 3;
    int64 last_log_index = 4;
    int64 last_log_term = 5;
}

message VoteResult {
    string partition_id = 1;
    int64 term = 2;
    bool vote_granted = 3;
} 

message PeerMessage {
    oneof message_type {
    	HelloRequest hello_request = 10;
    	HelloResult hello_result = 11;
    	
        AppendRequest append_request = 1;
        AppendResult append_result = 2;
        VoteRequest vote_request = 3;
        VoteResult vote_result = 4;
        
        ExtendRequest extend_request = 5;
     }
}




/*********************** Client Stuff ***********************/


message LogRequest {
	string partition_id = 1;
	LogData log_data = 2;
    int64 prevLsn = 3;  
    int64 prevSeq = 4;
}

enum Status {
	OK = 0;
	NOT_LEADER = 1;
	UNKNOWN_PARTITION = 2;
	TOO_LATE = 3;
	UNEXPECTED_LSN = 4;
	
	
	ERROR = 99;
}	

message Logged {
	string request_id = 1;
	Status status = 2;
	int64 lsn = 3;
	
	optional string leaderId = 11;
}


message ClientRequest {
	oneof client_request_type {
		LogRequest log_request = 1;
        SubscribeRequest subscribe_request = 2;
        SplitRequest split_request = 3;
	}
}


message ClientResponse {
	oneof client_response_type {
		Logged logged = 1;
		LogEntry log_entry = 2;
	}
}


/*********************** Regular RPC commands for the Log Server ***********************/

message CreatePartitionRequest {
	string partition_id = 1;
	ServerList server_list = 2;
}

message CreatePartitionResult {
	string partition_id = 1;
	bool success = 2;
	optional string message =3;
}
      
service LogService {
	/* the rpc messages exchanged among the Raft servers */
    rpc onPeerMessage(stream PeerMessage) returns (stream PeerMessage);
    
    /* the rpc interface that client use to talk to the LogServer */
    rpc onClientMessage(stream ClientRequest) returns (stream ClientResponse);
      
    /* the classic rpc calls that can be made to the log service */
    rpc CreatePartition (CreatePartitionRequest) returns (CreatePartitionResult);    
}

 

message LogPartition {
    string log_id = 1;
  	string partition_id = 2;
  	bytes low_key = 3;
  	bytes high_key = 4;
  	string created = 5;

    repeated string parents = 6;
  	repeated string children = 7;
  	optional string sealed = 8;
 }




message SubscribeRequest {
}   
   

message SplitRequest {
    string key = 1;
    string split = 2;
}




message SplitEvent {
    string key = 1;
    string split = 2;
}



service QueryService {
    rpc Query(QueryRequest) returns (QueryResponse) {}
}


message QueryRequest {
    string key = 1;
}   

message QueryResponse {
    string key = 1;
    string value = 2; 
}



