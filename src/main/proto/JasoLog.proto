
syntax = "proto3";

option java_multiple_files = true;
option java_package = "jaso.log.protocol";
option java_outer_classname = "JasoLogProto";
option objc_class_prefix = "JL";

package JasoLog;

/* stuff for a raft prototype only */

message State {
    int64 current_term = 1;
    string voted_for = 2;
}

message Message {
    oneof message_type {
    	HelloRequest hello_request = 10;
    	HelloResult hello_result = 11;
        AppendRequest append_request = 1;
        AppendResult append_reply = 2;
        VoteRequest vote_request = 3;
        VoteResult vote_result = 4;
        CallForElectionRequest call_for_election_request = 5;
        CallForElectionReply call_for_election_result = 6;
     }
}

message HelloRequest {
	string serverId = 1;
}

message HelloResult {
	string serverId = 1;
}


message AppendRequest {
    int64 term = 1;
    string leader = 2;
    int64 previous_log_id = 3;
    int64 previous_term = 4;
    repeated string entries = 5;
    int64 leader_commit = 6;
	string payload = 7;
}	

message AppendResult {
    int64 term = 1;
    bool success = 2;
}

message VoteRequest {
    int64 term = 1;
    string candidate_id = 2;
    int64 last_log_index = 3;
    int64 last_log_term = 4;
}

message VoteResult {
    int64 term = 1;
    bool vote_granted = 2;
} 

message CallForElectionRequest {
}

message CallForElectionReply {
	bool call_for_election = 1;
}
      
service RaftService {
    rpc onMessage(stream Message) returns (stream Message) {}
}


    
message SetPeersRequest {
	repeated EndPoint end_points = 1;
}

message SetPeersResult {
	bool success = 1;
}


/*
    Log Registry Service
    Maps a names log to discovery service.
    The registry could be a public service that simply
    maps a name to a list of endpoints of a log discovery 
    service.  For now we will just hard code the location 
    of the log discovery service
*/

/*
    Log Discovery Service
    This service is used to find log servers hosting
    partitions of the log. When a server first attaches
    to a log it can ask for the log server hosting the 
    partition for the empty string.  This can be the starting 
    point for learning about the structure of the log.  
*/
service LogDiscoveryService {
    rpc find(FindPartitionRequest) returns (LogPartition) {}
    rpc update(LogPartition) returns (LogPartition) {}
}

message FindPartitionRequest {
  string logId = 1;
  bytes key = 2;
}

message EndPoint {
	string partition_id = 1;
	string server_id = 2;
	string host_address = 3;
	int32 host_port = 4;
	bool leader_hint = 5;
}

message LogPartition {
    string log_id = 1;
  	string partition_id = 2;
  	bytes low_key = 3;
  	bytes high_key = 4;
  	string created = 5;

    repeated string parents = 6;
  	repeated string children = 7;
  	optional string sealed = 8;
 }




/*
    LogService
    The Log Service is the API provided to log clients which
    allows the client to make log requests and to receive a
    stream of log events from the log servers.
*/
service LogService {
}


message Request {
    oneof request_type {
        LogRequest log_request = 1;
        SubscribeRequest subscribe_request = 2;
        SplitRequest split_request = 3;
    }
}


message LogRequest {
    bytes key = 1;
    bytes value = 2;
    bytes requestId = 3;
    optional int64 minLsn = 4;
}

message SubscribeRequest {
}   
   

message SplitRequest {
    string key = 1;
    string split = 2;
}

message Event {
    oneof event_type {
        LogEvent log_event = 1;
        Duplicate duplicate_event = 2;
        TooLate too_late_event = 3;
        Conflict conflict_event = 4;
        Accepted accepted_event = 5;
        SplitEvent split_event = 10;
    }
}

message LogEvent {
    int64 lsn = 1;
    bytes key = 2;
    bytes value = 3;
    bytes request_id = 4;
    int32 kvr_checksum = 5;
    int32 checksum = 6;
}

message Duplicate {
    bytes requestId = 1;
    int64 lsn = 2;
}

message TooLate {
    bytes requestId = 1;
    int64 minLsn = 2;
    int64 nextLsn = 3;
}

message Conflict {
    bytes requestId = 1;
    int64 existingLsn = 2;
}

message Accepted {
    bytes requestId = 1;
    int64 lsn = 2;
}


message SplitEvent {
    string key = 1;
    string split = 2;
}



service QueryService {
    rpc Query(QueryRequest) returns (QueryResponse) {}
}


message QueryRequest {
    string key = 1;
}   

message QueryResponse {
    string key = 1;
    string value = 2;
    
    
}

