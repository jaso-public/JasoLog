
syntax = "proto3";

option java_multiple_files = true;
option java_package = "jaso.log.protocol";
option java_outer_classname = "JasoLogProto";
option objc_class_prefix = "JL";

package JasoLog;

/*
    Log Registry Service
    Maps a names log to discovery service.
    The registry could be a public service that simply
    maps a name to a list of endpoints of a log discovery 
    service.  For now we will just hard code the location 
    of the log discovery service
*/

/*
    Log Discovery Service
    This service is used to find log servers hosting
    partitions of the log. When a server first attaches
    to a log it can ask for the log server hosting the 
    partition for the empty string.  This can be the starting 
    point for learning about the structure of the log.  
*/
service LogDiscoveryService {
    rpc find(FindServerRequest) returns (Partition) {}
    rpc update(Partition) returns (Partition) {}
}


message Endpoint {
	string host_address = 1;
	int32 host_port = 2;
}

message Partition {
  	string partion_id = 1;
  	string low_key = 2;
  	string high_key = 3;
  	repeated string parents = 4;
  	repeated string children = 5;
  	repeated Endpoint endpoints = 6;
}

message FindServerRequest {
  string name = 1;
  string key = 2;
}



/*
    LogService
    The Log Service is the API provided to log clients which
    allows the client to make log requests and to receive a
    stream of log events from the log servers.
*/
service LogService {
    rpc Send(stream Request) returns (stream Event) {}
}


message Request {
    oneof request_type {
        LogRequest log_request = 1;
        SubscribeRequest subscribe_request = 2;
        SplitRequest split_request = 3;
    }
}


message LogRequest {
    string key = 1;
    string value = 2;
    string requestId = 3;
    optional int64 minLsn = 4;
}

message SubscribeRequest {
}   
   

message SplitRequest {
    string key = 1;
    string split = 2;
}

message Event {
    oneof event_type {
        LogEvent log_event = 1;
        Duplicate duplicate_event = 2;
        TooLate too_late_event = 3;
        Conflict conflict_event = 4;
        Accepted accepted_event = 5;
        SplitEvent split_event = 10;
    }
}

message LogEvent {
    string key = 1;
    string value = 2;
    int64 lsn = 3;
}

message Duplicate {
    string requestId = 1;
    int64 lsn = 2;
}

message TooLate {
    string requestId = 1;
    int64 minLsn = 2;
    int64 nextLsn = 3;
}

message Conflict {
    string requestId = 1;
    int64 existingLsn = 2;
}

message Accepted {
    string requestId = 1;
    int64 lsn = 2;
}


message SplitEvent {
    string key = 1;
    string split = 2;
}



service QueryService {
    rpc Query(QueryRequest) returns (QueryResponse) {}
}


message QueryRequest {
    string key = 1;
}   

message QueryResponse {
    string key = 1;
    string value = 2;
    
    
}

